{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vector AI Engineering template (uv edition) repository","text":"<p>This template repository can be used to bootstrap AI Engineering project repositories on Github! The template is meant for python codebases since Python is the most commonly used language by our team.</p> <p>The template includes:</p> <ul> <li> <p>pyproject.toml file to specify repository information and manage dependencies using uv.</p> </li> <li> <p>README.md which should have basic information on why the project is useful, installation instructions and other information on how users can get started.</p> </li> <li> <p>.pre-commit-config.yaml for running pre-commit hooks that check for code-style, apply formatting, check for type hints and run tests.</p> </li> <li> <p>.github/pull_request_template.md for PRs.</p> </li> <li> <p>.github/ISSUE_TEMPLATE for bug reports and issues that can be raised on the repository.</p> </li> <li> <p>.github/workflows for running CI workflows using Github actions. The template includes CI workflows for code checks, documentation building and releasing python packages to PyPI.</p> </li> <li> <p>LICENSE.md for adding a license to the project repository. By default, this is the Apache-2.0 license. Please change according to your project!</p> </li> <li> <p>docs for adding project documentation. Typically projects should have API reference documentation, user guides and tutorials.</p> </li> <li> <p>CONTRIBUTING.md with basic guidelines on how others can contribute to the repository.</p> </li> <li> <p>CODE_OF_CONDUCT.md with standards on how the community engages in a healthy and constructive manner.</p> </li> <li> <p>.gitignore with some standard file extensions to be ignored by git. Please add/modify as necessary.</p> </li> <li> <p>codecov.yml for using codecov.io to generate code coverage information for your repository. You would need to add codecov.io app as an integration to your repository.</p> </li> </ul> <p>If you are starting a new project, you can navigate to the Use this template button on the top right corner of the template repository home page which will allow you to bootstrap your project repo using this template.</p> <p>Please check out the user guide page for more detailed information on using the template features. For existing projects, the user guide can be followed to migrate to following the template more closely.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#top-level-module","title":"Top Level Module","text":""},{"location":"api/#aieng_template_uv","title":"aieng_template_uv","text":"<p>Top level module.</p>"},{"location":"api/#aieng_template_uv.hello","title":"hello","text":"<pre><code>hello()\n</code></pre> <p>UV's hello world.</p> <p>Returns:</p> Type Description <code>    str: A friendly hello.</code> Source code in <code>src/aieng_template_uv/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"UV's hello world.\n\n    Returns\n    -------\n        str: A friendly hello.\n    \"\"\"\n    return \"Hello from aieng-template-uv!\"\n</code></pre>"},{"location":"api/#aieng_template_uv.bar","title":"bar","text":"<p>bar module.</p>"},{"location":"api/#aieng_template_uv.bar.bar","title":"bar","text":"<pre><code>bar(foo)\n</code></pre> <p>Return input concatenated with 'bar'.</p> <p>Parameters:</p> Name Type Description Default <code>foo</code> <code>str</code> <p>Input string to be concatenated with 'bar'.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Concatenated string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; bar(\"foo\")\n'barfoo'\n&gt;&gt;&gt; bar(\"baz\")\n'barbaz'\n</code></pre> Source code in <code>src/aieng_template_uv/bar.py</code> <pre><code>def bar(foo: str) -&gt; str:\n    \"\"\"Return input concatenated with 'bar'.\n\n    Parameters\n    ----------\n    foo : str\n        Input string to be concatenated with 'bar'.\n\n    Returns\n    -------\n    str\n        Concatenated string.\n\n    Examples\n    --------\n    &gt;&gt;&gt; bar(\"foo\")\n    'barfoo'\n    &gt;&gt;&gt; bar(\"baz\")\n    'barbaz'\n\n    \"\"\"\n    return f\"bar{foo}\"\n</code></pre>"},{"location":"api/#aieng_template_uv.foo","title":"foo","text":"<p>foo module.</p>"},{"location":"api/#aieng_template_uv.foo.foo","title":"foo","text":"<pre><code>foo(bar)\n</code></pre> <p>Return input concatenated with 'foo'.</p> <p>Parameters:</p> Name Type Description Default <code>bar</code> <code>str</code> <p>Input string to be concatenated with 'foo'.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Concatenated string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo(\"bar\")\n'foobar'\n&gt;&gt;&gt; foo(\"baz\")\n'foobaz'\n</code></pre> Source code in <code>src/aieng_template_uv/foo.py</code> <pre><code>def foo(bar: str) -&gt; str:\n    \"\"\"Return input concatenated with 'foo'.\n\n    Parameters\n    ----------\n    bar : str\n        Input string to be concatenated with 'foo'.\n\n    Returns\n    -------\n    str\n        Concatenated string.\n\n    Examples\n    --------\n    &gt;&gt;&gt; foo(\"bar\")\n    'foobar'\n    &gt;&gt;&gt; foo(\"baz\")\n    'foobaz'\n\n    \"\"\"\n    return f\"foo{bar}\"\n</code></pre>"},{"location":"api/#foo-module","title":"Foo Module","text":""},{"location":"api/#aieng_template_uv.foo","title":"aieng_template_uv.foo","text":"<p>foo module.</p>"},{"location":"api/#aieng_template_uv.foo.foo","title":"foo","text":"<pre><code>foo(bar)\n</code></pre> <p>Return input concatenated with 'foo'.</p> <p>Parameters:</p> Name Type Description Default <code>bar</code> <code>str</code> <p>Input string to be concatenated with 'foo'.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Concatenated string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo(\"bar\")\n'foobar'\n&gt;&gt;&gt; foo(\"baz\")\n'foobaz'\n</code></pre> Source code in <code>src/aieng_template_uv/foo.py</code> <pre><code>def foo(bar: str) -&gt; str:\n    \"\"\"Return input concatenated with 'foo'.\n\n    Parameters\n    ----------\n    bar : str\n        Input string to be concatenated with 'foo'.\n\n    Returns\n    -------\n    str\n        Concatenated string.\n\n    Examples\n    --------\n    &gt;&gt;&gt; foo(\"bar\")\n    'foobar'\n    &gt;&gt;&gt; foo(\"baz\")\n    'foobaz'\n\n    \"\"\"\n    return f\"foo{bar}\"\n</code></pre>"},{"location":"api/#bar-module","title":"Bar Module","text":""},{"location":"api/#aieng_template_uv.bar","title":"aieng_template_uv.bar","text":"<p>bar module.</p>"},{"location":"api/#aieng_template_uv.bar.bar","title":"bar","text":"<pre><code>bar(foo)\n</code></pre> <p>Return input concatenated with 'bar'.</p> <p>Parameters:</p> Name Type Description Default <code>foo</code> <code>str</code> <p>Input string to be concatenated with 'bar'.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Concatenated string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; bar(\"foo\")\n'barfoo'\n&gt;&gt;&gt; bar(\"baz\")\n'barbaz'\n</code></pre> Source code in <code>src/aieng_template_uv/bar.py</code> <pre><code>def bar(foo: str) -&gt; str:\n    \"\"\"Return input concatenated with 'bar'.\n\n    Parameters\n    ----------\n    foo : str\n        Input string to be concatenated with 'bar'.\n\n    Returns\n    -------\n    str\n        Concatenated string.\n\n    Examples\n    --------\n    &gt;&gt;&gt; bar(\"foo\")\n    'barfoo'\n    &gt;&gt;&gt; bar(\"baz\")\n    'barbaz'\n\n    \"\"\"\n    return f\"bar{foo}\"\n</code></pre>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"user_guide/#pyprojecttoml-file-and-dependency-management","title":"pyproject.toml file and dependency management","text":"<p>If your project doesn't have a pyproject.toml file, simply copy the one from the template and update file according to your project.</p> <p>For managing dependencies, this template makes use of uv, which according to some benchmarks is faster than alternative like Poetry (which our original AI Engineering Template makes use of).</p> <p>Hence, be sure to install uv in order to to setup the development virtual environment. Instructions for installing uv can be found here. Note that uv supports optional dependency groups which helps to manage dependencies for different parts of development such as <code>documentation</code>, <code>testing</code>, etc. The core dependencies are installed using the command:</p> <pre><code>uv sync\n</code></pre> <p>Additional dependency groups can be installed using the <code>--group</code> flag followed by the group name. For example:</p> <pre><code>uv sync --all-extras --group docs --group test\n</code></pre> <p>mypy configuration options</p> <p>By default, the <code>mypy</code> configuration in the <code>pyproject.toml</code> disallows subclassing the <code>Any</code> type - <code>allow_subclassing_any = false</code>. In cases where the type checker is not able to determine the types of objects in some external library (e.g. <code>PyTorch</code>), it will treat them as <code>Any</code> and raise errors. If your codebase has many of such cases, you can set <code>allow_subclassing_any = true</code> in the <code>mypy</code> configuration or remove it entirely to use the default value (which is <code>true</code>). For example, in a <code>PyTorch</code> project, subclassing <code>nn.Module</code> will raise errors if <code>allow_subclassing_any</code> is set to <code>false</code>.</p>"},{"location":"user_guide/#pre-commit","title":"pre-commit","text":"<p>You can use pre-commit to run pre-commit hooks (code checks, liniting, etc.) when you run <code>git commit</code> and commit your code. Simply copy the <code>.pre-commit-config.yaml</code> file to the root of the repository and install the test dependencies which installs pre-commit. Then run:</p> <pre><code>pre-commit install\n</code></pre> <p>If you prefer to not enforce using pre-commit every time you run <code>git commit</code>, you will have to run <code>pre-commit run --all-files</code> from the command line before you commit your code.</p> <p>hook configuration</p> <p>Some of the pre-commit hooks use supported hooks from the web.</p> <p>For some others, they are locally installed and hence use the python virtual environment locally. If <code>language</code> is set to <code>python</code>, each time the hook is installed, a separate python virtual environment is created and you can specify dependencies needed using <code>additional_dependencies</code>.</p> <p>If <code>language</code> is set to <code>system</code>, the activated python virtual environment is used and and hence you have to ensure that the required dependencies and their versions are correctly installed.</p> <pre><code>  - repo: local\n    hooks:\n    - id: pytest\n      name: pytest\n      entry: python3 -m pytest -m \"not integration_test\"\n      language: python/system # set according to your project needs\n</code></pre> <p>typos</p> <p>The typos pre-commit hook is used to check for common spelling mistakes in the codebase. While useful, it may require some configuration to ignore certain words or phrases that are not typos. You can configure the typos hook in the <code>pyproject.toml</code> file. In a large codebase, it may be useful to disable the typos hook and only run it occasionally on the entire codebase.</p>"},{"location":"user_guide/#pre-commit-ci","title":"pre-commit ci","text":"<p>Instead of fixing pre-commit errors manually, a CI to fix them as well as update pre-commit hooks periodically can be enabled for your repository. Please check pre-commit.ci and add your repository. The configuration for <code>pre-commit.ci</code> can be added to the <code>.pre-commit-config.yaml</code> file.</p>"},{"location":"user_guide/#documentation","title":"documentation","text":"<p>If your project doesn't have documentation, copy the directory named <code>docs</code> to the root directory of your repository. This template uses MkDocs with the Material for MkDocs theme.</p> <p>In order to build the documentation, install the documentation dependencies as mentioned in the previous section, then run the command:</p> <pre><code>mkdocs build\n</code></pre> <p>If you're making changes to the docs, and want to serve them locally on your machine, then you can use this command instead:</p> <pre><code>mkdocs serve\n</code></pre> <p>The above will launch the docs locally on <code>http://127.0.0.1:8000</code>, which you can enter into your browser of choice. Conveniently, this process also watches for any changes you make to the docs and will update them as they occur.</p> <p>You can configure the documentation by updating the <code>mkdocs.yml</code> file at the root of your repository. The markdown files in the <code>docs</code> directory can be updated to reflect the project's documentation.</p>"},{"location":"user_guide/#github-pages-setup","title":"GitHub Pages Setup","text":"<p>To serve your documentation on GitHub Pages:</p> <ol> <li>Go to your repository's Settings tab</li> <li>Navigate to Pages in the left sidebar</li> <li>Under Source, select Deploy from a branch</li> <li>Choose the gh-pages branch and / (root) folder</li> <li>Click Save</li> </ol> <p>The documentation will be automatically built and deployed to GitHub Pages whenever you push changes to the main branch (thanks to the <code>.github/workflows/docs.yml</code> workflow). Your site will be available at <code>https://[username].github.io/[repository-name]/</code>.</p>"},{"location":"user_guide/#github-actions","title":"github actions","text":"<p>The template consists of some github action continuous integration workflows that you can add to your repository.</p> <p>The available workflows are:</p> <ul> <li>code checks: Static code analysis, code formatting and unit tests</li> <li>documentation: Project documentation including example API reference</li> <li>integration tests: Integration tests</li> <li>publish: Publishing python package to PyPI. Create a <code>PYPI_API_TOKEN</code> and add it to the repository's actions secret variables in order to publish PyPI packages when new software releases are created on Github.</li> </ul> <p>The test workflows also compute coverage and upload code coverage metrics to codecov.io. Create a <code>CODECOV_TOKEN</code> and add it to the repository's actions secret variables.</p> <p>codecov</p> <p>The codecov tool is subscribed under the free tier which makes it usable only for public open-source repos. Hence, if you would like to develop in a private repo, it is recommended to remove the codecov actions from the github workflow files.</p>"}]}